name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:6-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: |
        poetry install
    
    - name: Run tests
      run: |
        poetry run pytest
      env:
        SECRET_KEY: github_actions_test_key
        DEBUG: 'True'
        CELERY_BROKER_URL: redis://localhost:6379/0
        CELERY_RESULT_BACKEND: redis://localhost:6379/0

  deploy:
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: digitalocean
    # Define the secrets needed for deployment
    env:
      DJANGO_SECRET_KEY: ${{ vars.DJANGO_SECRET_KEY }}
      SUPABASE_DATABASE_URL: ${{ vars.SUPABASE_DATABASE_URL }}
      EMAIL_HOST: ${{ vars.EMAIL_HOST }}
      EMAIL_PORT: ${{ vars.EMAIL_PORT }}
      EMAIL_HOST_USER: ${{ vars.EMAIL_HOST_USER }}
      EMAIL_HOST_PASSWORD: ${{ vars.EMAIL_HOST_PASSWORD }}
      DEFAULT_FROM_EMAIL: ${{ secrets.DEFAULT_FROM_EMAIL }}
      OPENROUTER_API_KEY: ${{ vars.OPENROUTER_API_KEY }}
      DEBUG: ${{ vars.DEBUG }}
    
    steps:
    - name: Debug secrets
      run: |
        echo "Checking if DIGITALOCEAN_HOST secret exists..."
        if [ -n "${{ secrets.DIGITALOCEAN_HOST }}" ]; then
          echo "DIGITALOCEAN_HOST is set"
        else
          echo "DIGITALOCEAN_HOST is not set"
        fi
        
        echo "Checking if DEBUG secret exists..."
        if [ -n "${{ secrets.DEBUG }}" ]; then
          echo "DEBUG is set"
        else
          echo "DEBUG is not set"
        fi
        
    - name: Deploy to DigitalOcean
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DIGITALOCEAN_HOST }}
        username: ${{ secrets.DIGITALOCEAN_USERNAME }}
        key: ${{ secrets.DIGITALOCEAN_SSH_KEY }}
        port: 22
        envs: DJANGO_SECRET_KEY,SUPABASE_DATABASE_URL,EMAIL_HOST,EMAIL_PORT,EMAIL_HOST_USER,EMAIL_HOST_PASSWORD,DEFAULT_FROM_EMAIL,OPENAI_API_KEY,OPENROUTER_API_KEY, DEBUG
        script: |
          # Create project directory if it doesn't exist
          sudo mkdir -p /var/www/memoria.uy
          cd /var/www/memoria.uy
          
          # Check if it's a git repository, if not clone it
          if [ ! -d ".git" ]; then
            echo "Initializing git repository..."
            git clone https://github.com/raulsperoni/memoria.uy.git .
          else
            echo "Pulling latest changes..."
            git pull
          fi
          
          # Create .env file from .env.example and replace variables
          echo "Creating .env file from .env.example..."
          cp .env.example .env
          
          # Replace variables in .env file
          sed -i "s/SECRET_KEY=.*/SECRET_KEY=${DJANGO_SECRET_KEY}/g" .env
          sed -i "s/DEBUG=.*/DEBUG=${DEBUG}/g" .env
          sed -i "s/SUPABASE_DATABASE_URL=.*/SUPABASE_DATABASE_URL=${SUPABASE_DATABASE_URL}/g" .env
          
          # Email settings
          sed -i "s/EMAIL_HOST=.*/EMAIL_HOST=${EMAIL_HOST}/g" .env
          sed -i "s/EMAIL_PORT=.*/EMAIL_PORT=${EMAIL_PORT}/g" .env
          sed -i "s/EMAIL_HOST_USER=.*/EMAIL_HOST_USER=${EMAIL_HOST_USER}/g" .env
          sed -i "s/EMAIL_HOST_PASSWORD=.*/EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}/g" .env
          sed -i "s/DEFAULT_FROM_EMAIL=.*/DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}/g" .env
          
          # API Keys
          sed -i "s/OPENROUTER_API_KEY=.*/OPENROUTER_API_KEY=${OPENROUTER_API_KEY}/g" .env
          
          # Deploy the application
          sudo docker compose down
          sudo docker compose up -d --build
          
          # Wait for the containers to be ready
          echo "Waiting for containers to be ready..."
          
          # Check if web container is healthy
          MAX_RETRIES=5
          RETRY_INTERVAL=5
          RETRY_COUNT=0
          
          until [ "$RETRY_COUNT" -ge "$MAX_RETRIES" ] || sudo docker compose ps web | grep -q "(healthy)"; do
            echo "Waiting for web container to be healthy... ($RETRY_COUNT/$MAX_RETRIES)"
            sleep "$RETRY_INTERVAL"
            RETRY_COUNT=$((RETRY_COUNT+1))
          done
          
          if [ "$RETRY_COUNT" -ge "$MAX_RETRIES" ]; then
            echo "Error: Web container did not become healthy within the timeout period."
            sudo docker compose logs web
            exit 1
          fi
          
          echo "All containers are healthy!"
          
          # Run migrations and collect static files
          sudo docker compose exec -T web python manage.py migrate
          sudo docker compose exec -T web make tailwind-build
          sudo docker compose exec -T web python manage.py collectstatic --noinput
